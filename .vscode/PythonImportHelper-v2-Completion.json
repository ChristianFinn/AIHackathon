[
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "SimpleProblem2.Cody",
        "description": "SimpleProblem2.Cody",
        "isExtraImport": true,
        "detail": "SimpleProblem2.Cody",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "UniqueList",
        "importPath": "SimpleProblem3.Cody",
        "description": "SimpleProblem3.Cody",
        "isExtraImport": true,
        "detail": "SimpleProblem3.Cody",
        "documentation": {}
    },
    {
        "label": "UniqueList",
        "importPath": "SimpleProblem3.Cody",
        "description": "SimpleProblem3.Cody",
        "isExtraImport": true,
        "detail": "SimpleProblem3.Cody",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "find_largest_integer",
        "importPath": "SimpleCoPilot",
        "description": "SimpleCoPilot",
        "isExtraImport": true,
        "detail": "SimpleCoPilot",
        "documentation": {}
    },
    {
        "label": "find_largest_integer",
        "importPath": "TechnicalCoPilot",
        "description": "TechnicalCoPilot",
        "isExtraImport": true,
        "detail": "TechnicalCoPilot",
        "documentation": {}
    },
    {
        "label": "TestCody",
        "kind": 6,
        "importPath": "SimpleProblem1.python_tests.cody_test",
        "description": "SimpleProblem1.python_tests.cody_test",
        "peekOfCode": "class TestCody(unittest.TestCase):\n    def test_empty_list(self):\n        lst = []\n        self.assertEqual(find_largest_integer(lst), None)\n    def test_list_with_one_element(self):\n        lst = [5] \n        self.assertEqual(find_largest_integer(lst), 5)\n    def test_list_with_duplicates(self):\n        lst = [1, 5, 2, 5, 3]\n        self.assertEqual(find_largest_integer(lst), 5)",
        "detail": "SimpleProblem1.python_tests.cody_test",
        "documentation": {}
    },
    {
        "label": "TestSelectedCode",
        "kind": 6,
        "importPath": "SimpleProblem1.python_tests.cody_test",
        "description": "SimpleProblem1.python_tests.cody_test",
        "peekOfCode": "class TestSelectedCode(unittest.TestCase):\n    def test_empty_list(self):\n        lst = []\n        self.assertEqual(find_largest(lst), None)\n    def test_single_element_list(self):\n        lst = [5] \n        self.assertEqual(find_largest(lst), 5)\n    def test_list_with_duplicates(self):\n        lst = [1, 5, 2, 5, 3]\n        self.assertEqual(find_largest(lst), 5)",
        "detail": "SimpleProblem1.python_tests.cody_test",
        "documentation": {}
    },
    {
        "label": "TestUniqueList",
        "kind": 6,
        "importPath": "SimpleProblem1.python_tests.cody_test",
        "description": "SimpleProblem1.python_tests.cody_test",
        "peekOfCode": "class TestUniqueList(unittest.TestCase):\n    def test_empty_list(self):\n        my_list = []\n        unique_list = []\n        Cody.unique(my_list, unique_list)\n        self.assertEqual(len(unique_list), 0)\n    def test_single_value_list(self):\n        my_list = [1]\n        unique_list = []\n        Cody.unique(my_list, unique_list)",
        "detail": "SimpleProblem1.python_tests.cody_test",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "SimpleProblem1.Cody",
        "description": "SimpleProblem1.Cody",
        "peekOfCode": "data = '{tools:[\"copilot\",\"cody\",\"whisper\",\"copilot\"],email:\"thecookiemonster@cookiejar.com\"}'\nobj = json.loads(data)",
        "detail": "SimpleProblem1.Cody",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "SimpleProblem1.Cody",
        "description": "SimpleProblem1.Cody",
        "peekOfCode": "obj = json.loads(data)",
        "detail": "SimpleProblem1.Cody",
        "documentation": {}
    },
    {
        "label": "json_data",
        "kind": 5,
        "importPath": "SimpleProblem1.CoPilot",
        "description": "SimpleProblem1.CoPilot",
        "peekOfCode": "json_data = '{ \"tools\": [\"copilot\", \"cody\", \"whisper\", \"copilot\"], \"email\": \"thecookiemonster@cookiejar.com\" }'\ndata = json.loads(json_data)\n# Accessing the values\ntools = data[\"tools\"]\nemail = data[\"email\"]\n# Printing the values\nprint(\"Tools:\", tools)\nprint(\"Email:\", email)",
        "detail": "SimpleProblem1.CoPilot",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "SimpleProblem1.CoPilot",
        "description": "SimpleProblem1.CoPilot",
        "peekOfCode": "data = json.loads(json_data)\n# Accessing the values\ntools = data[\"tools\"]\nemail = data[\"email\"]\n# Printing the values\nprint(\"Tools:\", tools)\nprint(\"Email:\", email)",
        "detail": "SimpleProblem1.CoPilot",
        "documentation": {}
    },
    {
        "label": "tools",
        "kind": 5,
        "importPath": "SimpleProblem1.CoPilot",
        "description": "SimpleProblem1.CoPilot",
        "peekOfCode": "tools = data[\"tools\"]\nemail = data[\"email\"]\n# Printing the values\nprint(\"Tools:\", tools)\nprint(\"Email:\", email)",
        "detail": "SimpleProblem1.CoPilot",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 5,
        "importPath": "SimpleProblem1.CoPilot",
        "description": "SimpleProblem1.CoPilot",
        "peekOfCode": "email = data[\"email\"]\n# Printing the values\nprint(\"Tools:\", tools)\nprint(\"Email:\", email)",
        "detail": "SimpleProblem1.CoPilot",
        "documentation": {}
    },
    {
        "label": "TestEmailValidation",
        "kind": 6,
        "importPath": "SimpleProblem2.python_tests.cody_tests",
        "description": "SimpleProblem2.python_tests.cody_tests",
        "peekOfCode": "class TestEmailValidation(unittest.TestCase):\n    def test_valid_email(self):\n        self.assertTrue(validate_email('test@example.com'))\n    def test_invalid_email_missing_at(self):\n        self.assertFalse(validate_email('testexample.com'))\n    def test_invalid_email_too_short(self):\n        self.assertFalse(validate_email('a@b.com'))\n    def test_invalid_email_too_long(self):\n        self.assertFalse(validate_email('a' * 50 + '@example.com'))\n    def test_invalid_email_invalid_domain(self):",
        "detail": "SimpleProblem2.python_tests.cody_tests",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "kind": 2,
        "importPath": "SimpleProblem2.Cody",
        "description": "SimpleProblem2.Cody",
        "peekOfCode": "def validate_email(email):\n    if len(email) < 3 or len(email) > 20:\n        return False\n    if not re.match(r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\", email):\n        return False\n    return True\nemail = input(\"Enter email: \")\nif validate_email(email):\n    print(\"Valid email\")\nelse:",
        "detail": "SimpleProblem2.Cody",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 5,
        "importPath": "SimpleProblem2.Cody",
        "description": "SimpleProblem2.Cody",
        "peekOfCode": "email = input(\"Enter email: \")\nif validate_email(email):\n    print(\"Valid email\")\nelse:\n    print(\"Invalid email\")",
        "detail": "SimpleProblem2.Cody",
        "documentation": {}
    },
    {
        "label": "UniqueList",
        "kind": 6,
        "importPath": "SimpleProblem3.Cody",
        "description": "SimpleProblem3.Cody",
        "peekOfCode": "class UniqueList:\n    def __init__(self, my_list):\n        self.my_list = my_list\n        self.unique_list = []\n    def get_unique_list(self):\n        for x in self.my_list:\n            if x not in self.unique_list:\n                self.unique_list.append(x)\n        return self.unique_list\n# Second Option",
        "detail": "SimpleProblem3.Cody",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "SimpleProblem3.Cody",
        "description": "SimpleProblem3.Cody",
        "peekOfCode": "my_list = [\"apple\", \"banana\", \"cherry\", \"apple\", \"orange\", \"banana\"]\nclass UniqueList:\n    def __init__(self, my_list):\n        self.my_list = my_list\n        self.unique_list = []\n    def get_unique_list(self):\n        for x in self.my_list:\n            if x not in self.unique_list:\n                self.unique_list.append(x)\n        return self.unique_list",
        "detail": "SimpleProblem3.Cody",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "SimpleProblem3.Cody",
        "description": "SimpleProblem3.Cody",
        "peekOfCode": "my_list = [\"apple\", \"banana\", \"cherry\", \"apple\", \"orange\", \"banana\"]\nunique_list = list(set(my_list))\nprint(unique_list)",
        "detail": "SimpleProblem3.Cody",
        "documentation": {}
    },
    {
        "label": "unique_list",
        "kind": 5,
        "importPath": "SimpleProblem3.Cody",
        "description": "SimpleProblem3.Cody",
        "peekOfCode": "unique_list = list(set(my_list))\nprint(unique_list)",
        "detail": "SimpleProblem3.Cody",
        "documentation": {}
    },
    {
        "label": "TestUniqueList",
        "kind": 6,
        "importPath": "SimpleProblem3.cody_tests",
        "description": "SimpleProblem3.cody_tests",
        "peekOfCode": "class TestUniqueList(unittest.TestCase):\n    def test_empty_list(self):\n        my_list = []\n        unique_list = UniqueList(my_list).get_unique_list()\n        self.assertEqual(len(unique_list), 0)\n    def test_single_value_list(self):\n        my_list = [1] \n        unique_list = UniqueList(my_list).get_unique_list()\n        self.assertEqual(unique_list, [1])\n    def test_duplicates(self):",
        "detail": "SimpleProblem3.cody_tests",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "SimpleProblem4.Cody",
        "description": "SimpleProblem4.Cody",
        "peekOfCode": "conn = sqlite3.connect('example.db')\nc = conn.cursor()\n# Create table\nc.execute('''CREATE TABLE stocks\n             (date text, trans text, symbol text, qty real, price real)''')\n# Insert a row of data\nc.execute(\"INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)\")\n# Save (commit) the changes\nconn.commit()\n# Add unique constraint on symbol column",
        "detail": "SimpleProblem4.Cody",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "SimpleProblem4.Cody",
        "description": "SimpleProblem4.Cody",
        "peekOfCode": "c = conn.cursor()\n# Create table\nc.execute('''CREATE TABLE stocks\n             (date text, trans text, symbol text, qty real, price real)''')\n# Insert a row of data\nc.execute(\"INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)\")\n# Save (commit) the changes\nconn.commit()\n# Add unique constraint on symbol column\nc.execute('CREATE UNIQUE INDEX idx_symbol ON stocks(symbol)')",
        "detail": "SimpleProblem4.Cody",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "SimpleProblem4.CoPilot",
        "description": "SimpleProblem4.CoPilot",
        "peekOfCode": "conn = sqlite3.connect('example.db')\ncursor = conn.cursor()\n# Create a table with unique fields\ncursor.execute('''\n    CREATE TABLE IF NOT EXISTS your_table (\n        id INTEGER PRIMARY KEY,\n        name TEXT UNIQUE,\n        email TEXT UNIQUE\n    )\n''')",
        "detail": "SimpleProblem4.CoPilot",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "SimpleProblem4.CoPilot",
        "description": "SimpleProblem4.CoPilot",
        "peekOfCode": "cursor = conn.cursor()\n# Create a table with unique fields\ncursor.execute('''\n    CREATE TABLE IF NOT EXISTS your_table (\n        id INTEGER PRIMARY KEY,\n        name TEXT UNIQUE,\n        email TEXT UNIQUE\n    )\n''')\n# Commit the changes and close the connection",
        "detail": "SimpleProblem4.CoPilot",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "SimpleProblem4.select",
        "description": "SimpleProblem4.select",
        "peekOfCode": "conn = sqlite3.connect('example.db')\nc = conn.cursor()\nc.execute('SELECT * FROM stocks')\nrows = c.fetchall()\nfor row in rows:\n    print(row)\nconn.close()",
        "detail": "SimpleProblem4.select",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "SimpleProblem4.select",
        "description": "SimpleProblem4.select",
        "peekOfCode": "c = conn.cursor()\nc.execute('SELECT * FROM stocks')\nrows = c.fetchall()\nfor row in rows:\n    print(row)\nconn.close()",
        "detail": "SimpleProblem4.select",
        "documentation": {}
    },
    {
        "label": "rows",
        "kind": 5,
        "importPath": "SimpleProblem4.select",
        "description": "SimpleProblem4.select",
        "peekOfCode": "rows = c.fetchall()\nfor row in rows:\n    print(row)\nconn.close()",
        "detail": "SimpleProblem4.select",
        "documentation": {}
    },
    {
        "label": "test_find_largest_integer",
        "kind": 2,
        "importPath": "SimpleProblem6.python_tests.test_SimpleCoPilot",
        "description": "SimpleProblem6.python_tests.test_SimpleCoPilot",
        "peekOfCode": "def test_find_largest_integer():\n    # Test case with a single list\n    assert find_largest_integer([[1, 2, 3]]) == 3\n    # Test case with multiple lists\n    assert find_largest_integer([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 9\n    # Test case with negative numbers\n    assert find_largest_integer([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == -1\n    # Test case with an empty list\n    assert find_largest_integer([]) == float('-inf')\n    # Test case with an empty sublist",
        "detail": "SimpleProblem6.python_tests.test_SimpleCoPilot",
        "documentation": {}
    },
    {
        "label": "TestFindLargestInteger",
        "kind": 6,
        "importPath": "SimpleProblem6.python_tests.test_TechnicalCoPilot",
        "description": "SimpleProblem6.python_tests.test_TechnicalCoPilot",
        "peekOfCode": "class TestFindLargestInteger():\n    def test_empty_lists(self):\n        lst = [[]]\n        assert(find_largest_integer(lst) == None)\n    def test_different_data_types(self):\n        lst = [[1, 2, 3], ['a', 'b', 'c'], [True, False]]\n        assert(find_largest_integer(lst) == 3)\n    def test_negative_numbers(self):\n        lst = [[-5, -10, -3], [-2, -7, -1], [-8, -4, -6]]\n        assert(find_largest_integer(lst) ==  -1)",
        "detail": "SimpleProblem6.python_tests.test_TechnicalCoPilot",
        "documentation": {}
    },
    {
        "label": "find_largest_integer",
        "kind": 2,
        "importPath": "SimpleProblem6.SimpleCoPilot",
        "description": "SimpleProblem6.SimpleCoPilot",
        "peekOfCode": "def find_largest_integer(list_of_lists):\n    max_number = float('-inf')  # Initialize with negative infinity\n    for sublist in list_of_lists:\n        for number in sublist:\n            if number > max_number:\n                max_number = number\n    return max_number",
        "detail": "SimpleProblem6.SimpleCoPilot",
        "documentation": {}
    },
    {
        "label": "find_largest_integer",
        "kind": 2,
        "importPath": "SimpleProblem6.TechnicalCoPilot",
        "description": "SimpleProblem6.TechnicalCoPilot",
        "peekOfCode": "def find_largest_integer(lst):\n    largest_integer = None\n    for sublist in lst:\n        for item in sublist:\n            if isinstance(item, int):\n                if largest_integer is None or item > largest_integer:\n                    largest_integer = item\n    return largest_integer",
        "detail": "SimpleProblem6.TechnicalCoPilot",
        "documentation": {}
    }
]